import board as gc

my_board = gc.Board(board_size=3)

my_board.print_board()
'''
space_list = my_board.get_space_list()
for space in space_list:
   print("---for space " + str(space) + " -------------------")
   left = space.get_left_neighbor()
   right = space.get_right_neighbor()
   above = space.get_above_neighbor()
   below = space.get_below_neighbor()
   print("left: " + str(left))
   print("right: " + str(right))
   print("above: " + str(above))
   print("below: " + str(below))
'''
print("*****************testing up and down movement********************")
my_board.print_board()
my_board.thief.move("down")
print("thief down---------")
my_board.print_board()
my_board.thief.move("down")
print("thief down---------")
my_board.print_board()
my_board.thief.move("up")
print("thief up----------")
my_board.print_board()
print("******************testing moving into occupied spot *************")
my_board.print_board()
my_board.policemen[0].move("right")
print("pman 0 right----------")
my_board.print_board()
print("*****************testing moving left and right***************")
my_board.print_board()
my_board.policemen[1].move("right")
print("pman 1 right----------")
my_board.print_board()
my_board.policemen[1].move("left")
print("pman 1 left-----------")
my_board.print_board()
print("*****************testing moving out of bounds*****************")
my_board.print_board()
my_board.thief.move("up")
print("thief up--------------")
my_board.print_board()
my_board.thief.move("left")
print("thief left------------")
my_board.print_board()
my_board.thief.move("right")
print("thief right-----------")
my_board.print_board()
my_board.policemen[0].move("down")
print("pman 0 down----------")
my_board.print_board()
print("******************thief moving around*************************")
my_board.print_board()
my_board.thief.move("down")
print("thief down")
my_board.print_board()
my_board.thief.move("right")
print("thief right")
my_board.print_board()
my_board.thief.move("down")
print("thief down")
my_board.print_board()
my_board.thief.move("left")
print("thief left")
my_board.print_board()
my_board.thief.move("up")
print("thief up")
my_board.print_board()
my_board.thief.move("left")
print("thief left")
my_board.print_board()
my_board.thief.move("right")
print("thief right")
my_board.print_board()
my_board.thief.place(1,1)
print("place thief at 1, 1")
my_board.print_board()

print("============================testing distance getting=======================")
board = gc.Board(board_size=4)
board.print_board()
print("should be 0: " + str(board.get_distance_between_spaces(1, 1, 1, 1)))
print("should be 1: " + str(board.get_distance_between_spaces(1, 1, 1, 2)))
print("should be 2: " + str(board.get_distance_between_spaces(1, 1, 2, 1)))
print("should be 3: " + str(board.get_distance_between_spaces(1, 1, 2, 2)))
print("should be 4: " + str(board.get_distance_between_spaces(1, 1, 3, 3)))
print("should be 5: " + str(board.get_distance_between_spaces(1, 1, 3, 4)))
print("should be 6: " + str(board.get_distance_between_spaces(0, 0, 3, 0)))
print("should be err: " + str(board.get_distance_between_spaces(1, 1, 20, 1)))
print("should be err: " + str(board.get_distance_between_spaces(1, 1, 20, 1, 11)))
print("should be err: " + str(board.get_distance_between_spaces(1, 1, 20, 1, 12)))
print("should be err: " + str(board.get_distance_between_spaces(1, 1, 20, 1, 13)))
print("should be err: " + str(board.get_distance_between_spaces(1, 1, 20, 1, 14)))
print("should be err: " + str(board.get_distance_between_spaces(1, 1, 20, 1, 15)))
print("should be err: " + str(board.get_distance_between_spaces(1, 1, 20, 1, 16)))
print("================================testing node ai fxns========================")
board.thief.place(1, 1)
board.policemen[0].place(3, 4)
board.policemen[1].place(2, 1)
board.print_board()
print("************testing get_options()**********")
print("t options are:")
options = board.get_options()
print(options)
board.increment_turn()
print("p1 (at 3,4) options are:")
print(board.get_options())
print("p2 (at 2,1) options are:")
board.increment_turn()
print(board.get_options())
board.increment_turn()

print("************testing get_node_rating()**********")
print(board.get_node_rating())
board.p1_strategy = "greedy"
print(board.get_node_rating())
board.p2_strategy = "greedy"
print(board.get_node_rating())
print("************testing do_option**********")
board.print_board()
print("stay for " + board.get_current_piece_name())
board.do_option("stay")
board.print_board()
print("left for " + board.get_current_piece_name())
board.do_option("left")
board.print_board()
print("right for " + board.get_current_piece_name())
board.do_option("right")
board.print_board()
print("************testing get_better_choice()**********")
rating1 = [0,0,0]
rating2 = [10,10,10]
ret = board.get_better_choice(rating1, "left", rating2, "right")
print(board.get_current_piece_name())
print(ret)
board.increment_turn()
ret = board.get_better_choice(rating1, "left", rating2, "right")
print(board.get_current_piece_name())
print(ret)
board.increment_turn()
ret = board.get_better_choice(rating1, "left", rating2, "right")
print(board.get_current_piece_name())
print(ret)
board.increment_turn()
rating1 = [1,90,5]
rating2 = [3,6,10]
ret = board.get_better_choice(rating1, "left", rating2, "right")
print(board.get_current_piece_name())
print(ret)
board.increment_turn()
ret = board.get_better_choice(rating1, "left", rating2, "right")
print(board.get_current_piece_name())
print(ret)
board.increment_turn()
ret = board.get_better_choice(rating1, "left", rating2, "right")
print(board.get_current_piece_name())
print(ret)
print("*****************testing should exit search****************")
should_exit_rating = [0, 0, 0]
should_not_exit_rating = [1, 1, 1]

print("doing should exit rating")
print(board.should_exit_search(should_exit_rating))
board.increment_turn()
print(board.should_exit_search(should_exit_rating))
board.increment_turn()
print(board.should_exit_search(should_exit_rating))
board.increment_turn()
print("doing should not exit rating")
print(board.should_exit_search(should_not_exit_rating))
board.increment_turn()
print(board.should_exit_search(should_not_exit_rating))
board.increment_turn()
print(board.should_exit_search(should_not_exit_rating))
board.increment_turn()
